
# run the DNS lambda every 5 minutes
locals {
  lambda_pkg_timer = var.multi_host ? data.archive_file.multihost : data.archive_file.autoscale
}

resource "aws_lambda_function" "autoscale_handling_timer" {
  filename         = local.lambda_pkg.output_path
  function_name    = format("%s", var.autoscale_handler_unique_identifier)
  role             = aws_iam_role.autoscale_handling.arn
  handler          = "autoscale.lambda_handler"
  runtime          = "python3.8"
  source_code_hash = filebase64sha256(local.lambda_pkg.output_path)
  description      = "Handles DNS for autoscaling groups by receiving autoscaling notifications and setting/deleting records from route53"
  environment {
    variables = {
      # "use_public_ip" = var.use_public_ip
      "hostname_tag_name_private" = var.hostname_tag_name_private
      "hostname_tag_name_public" = var.hostname_tag_name_public
      # "hostname_tag_name" = var.hostname_tag_name
    }
  }
}

resource "aws_cloudwatch_event_rule" "every_five_minutes" {
  name = format("evt-%s-min-%s", var.autoscale_dns_timer_minutes, var.autoscale_handler_unique_identifier)
	description = "Fires every ${var.autoscale_dns_timer_minutes} minutes"
	schedule_expression = "rate(${var.autoscale_dns_timer_minutes} minutes)"
}

resource "aws_cloudwatch_event_target" "check_foo_every_five_minutes" {
	rule = "${aws_cloudwatch_event_rule.every_five_minutes.name}"
	target_id = format("%s-tgt-%s-min", var.autoscale_handler_unique_identifier, var.autoscale_dns_timer_minutes)
	arn = "${aws_lambda_function.autoscale_handling.arn}"
}

resource "aws_lambda_permission" "allow_cloudwatch_to_call_check_foo" {
	statement_id = "AllowExecutionFromCloudWatch-${var.autoscale_handler_unique_identifier}"
	action = "lambda:InvokeFunction"
	function_name = "${aws_lambda_function.autoscale_handling.function_name}"
	principal = "events.amazonaws.com"
	source_arn = "${aws_cloudwatch_event_rule.every_five_minutes.arn}"
}
